# Updated requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
opencv-python-headless==4.8.1.78
face-recognition==1.3.0
Pillow==10.1.0
python-multipart==0.0.6
requests==2.31.0
numpy==1.24.3
python-dotenv==1.0.0
supabase==2.3.0
pydantic==2.5.0
python-jose[cryptography]==3.3.0

# For development
pytest==7.4.3
httpx==0.25.2

---

# setup_server.py
import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Run a command and handle errors"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} completed successfully")
            return True
        else:
            print(f"‚ùå {description} failed:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Error during {description}: {e}")
        return False

def setup_server():
    """Setup the face recognition server"""
    print("üöÄ Setting up Face Recognition Server...")
    
    # Check Python version
    python_version = sys.version_info
    if python_version.major != 3 or python_version.minor < 8:
        print("‚ùå Python 3.8+ is required")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor} detected")
    
    # Create virtual environment
    if not os.path.exists("venv"):
        if not run_command("python -m venv venv", "Creating virtual environment"):
            return False
    
    # Activate virtual environment and install dependencies
    activate_cmd = "venv\\Scripts\\activate" if os.name == 'nt' else "source venv/bin/activate"
    
    # Install dependencies
    install_cmd = f"{activate_cmd} && pip install --upgrade pip && pip install -r requirements.txt"
    if not run_command(install_cmd, "Installing dependencies"):
        # Try alternative approach for face_recognition
        print("üîÑ Trying alternative installation for face_recognition...")
        alt_cmd = f"{activate_cmd} && pip install cmake && pip install dlib && pip install face_recognition"
        run_command(alt_cmd, "Installing face_recognition with cmake")
    
    # Check .env file
    if not os.path.exists(".env"):
        print("‚ö†Ô∏è .env file not found. Creating template...")
        env_template = '''# Face Recognition Server Configuration
HOST=0.0.0.0
PORT=8000
DEBUG=true
SECRET_KEY=your-secret-key-change-this
FACE_VERIFICATION_THRESHOLD=0.7

# Supabase Configuration (Update with your credentials)
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=your-anon-key

# Logging
LOG_LEVEL=INFO
ENABLE_CONSOLE_LOGGING=true
'''
        with open(".env", "w") as f:
            f.write(env_template)
        print("üìù Please update .env file with your Supabase credentials")
    
    # Test installation
    test_cmd = f"{activate_cmd} && python -c 'import face_recognition, fastapi, supabase; print(\"All packages imported successfully\")'"
    if run_command(test_cmd, "Testing installation"):
        print("üéâ Server setup completed successfully!")
        print("\nüìã Next steps:")
        print("1. Update .env file with your Supabase credentials")
        print("2. Run: python main.py")
        print("3. Test server at: http://localhost:8000")
        return True
    else:
        print("‚ùå Installation test failed")
        return False

if __name__ == "__main__":
    setup_server()

---

# run_server.py
import os
import subprocess
import sys
from dotenv import load_dotenv

def check_env_file():
    """Check if .env file exists and has required variables"""
    if not os.path.exists(".env"):
        print("‚ùå .env file not found!")
        print("Please create .env file with required configuration")
        return False
    
    load_dotenv()
    
    required_vars = ["SUPABASE_URL", "SUPABASE_ANON_KEY"]
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Missing environment variables: {', '.join(missing_vars)}")
        return False
    
    return True

def run_server():
    """Run the face recognition server"""
    print("üöÄ Starting Face Recognition Server...")
    
    # Check environment
    if not check_env_file():
        return
    
    # Check if virtual environment exists
    venv_path = "venv"
    if os.path.exists(venv_path):
        activate_cmd = f"{venv_path}\\Scripts\\activate" if os.name == 'nt' else f"source {venv_path}/bin/activate"
        cmd = f"{activate_cmd} && python main.py"
    else:
        cmd = "python main.py"
    
    try:
        subprocess.run(cmd, shell=True)
    except KeyboardInterrupt:
        print("\nüëã Server stopped")
    except Exception as e:
        print(f"‚ùå Error starting server: {e}")

if __name__ == "__main__":
    run_server()

---

# test_server.py
import requests
import json
import time

def test_server_health():
    """Test if server is running and healthy"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Server is healthy")
            print(f"   Status: {data.get('status')}")
            print(f"   Services: {data.get('services', {})}")
            return True
        else:
            print(f"‚ùå Server health check failed: {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå Cannot connect to server: {e}")
        return False

def test_face_recognition():
    """Test face recognition functionality"""
    print("\nüß™ Testing Face Recognition...")
    
    # Test with a sample image (you need to provide test_face.jpg)
    if not os.path.exists("test_face.jpg"):
        print("‚ö†Ô∏è test_face.jpg not found. Skipping face recognition test.")
        return
    
    try:
        # Test registration
        files = {'file': open('test_face.jpg', 'rb')}
        data = {'student_id': 'TEST001', 'student_email': 'test@example.com'}
        
        response = requests.post(
            "http://localhost:8000/api/face/register",
            files=files,
            data=data,
            timeout=30
        )
        
        if response.status_code == 200:
            print("‚úÖ Face registration test passed")
            
            # Test verification
            files = {'file': open('test_face.jpg', 'rb')}
            data = {'student_id': 'TEST001'}
            
            response = requests.post(
                "http://localhost:8000/api/face/verify",
                files=files,
                data=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Face verification test passed")
                print(f"   Verified: {result.get('verified')}")
                print(f"   Similarity: {result.get('similarity', 0):.3f}")
            else:
                print(f"‚ùå Face verification test failed: {response.status_code}")
        else:
            print(f"‚ùå Face registration test failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Face recognition test error: {e}")

def main():
    """Run all tests"""
    print("üß™ Testing Face Recognition Server\n")
    
    # Wait for server to start
    print("‚è≥ Waiting for server to start...")
    time.sleep(2)
    
    if test_server_health():
        test_face_recognition()
        print("\n‚úÖ All tests completed!")
    else:
        print("\n‚ùå Server not responding. Make sure it's running.")

if __name__ == "__main__":
    main()